-> creating users in Jenkins:

Navigate to "Manage Jenkins" and in the "security" topic choose "users" and create users.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> create a job in Jenkins:

* In the Jenkins Dashboard , click "New item" , it will route to next page and give the "item" "name" and choose "Freestyle project" and click "ok".

* Then in the "configure" section , scroll down to "Add build step" and choose "Execute Shell" and give a simple command like "echo "Hello world!".

* Then click "save" and click "Build now". It will execute that job. In the console output we can see the logs and output.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> Schedule a job using cron:

Goto the job , then navigate to "configure" and in the enable build triggers , choose "build periodically" and give the cron as "H/2 * * * *", it will run that job every two minutes.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> Assigning a static ip for Jenkins URL:

In the dashbard, navigate to "Manage Jenkins", in the "system configuration" choose "system" and in that scroll down and look for Jenkins URL. We can change the URL there.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> Giving shell command in the job:

* In the "job-1" , navigate to "configure" and then in the "Execute shell" type "ls -lrta" and click "Build now" it will show what are the files in the directory (/var/lib/Jenkins/workspace/<job-name>)

* If we click "Build now" for the second time, this pipeline will fail, because this pipeline is creating a folder named "syed_folder" in the path "/var/lib/Jenkins/workspace/job-1", so can't create another folder with same name. so this pipeline will fail. If we want this pipeline to be successful either we can give some other folder name or delete that existing folder using terminal.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> gonna create a pipeline:

* created another two jobs named "job-2" and "job-3", in "job-2" gave "date" in "job-3" gave "df -h".
* now gonna link these three jobs.
* just if i trigger "job-1", i want the "job-3" to be triggerd.
* Let's see how to do that. In "job-1" navigate to "configure" and scroll down and look for "Post-build Actions" and choose "Build other projects" , in that give the project name as "job-3" and can choose how to trigger that job.

-----------------------------------------------------------------------------------------------------------------------------------------------

Triggering a job remotely using URL:

Goto "job-1", in the "configure" there will be a section called "Triggers" and in that choose "Trigger builds remotely" and in the "Authentication Token" give "Jenkins", it will give a URL, if we trigger that URL, that job will be scheduled.

-----------------------------------------------------------------------------------------------------------------------------------------------

Triggering a job remotely using cron:

Goto "job-1", in the "configure" there will be a section called "Triggers" and in that choose "Build periodically" and give the required cron like "* * * * *", so now this job will be triggered for every minutes.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> creating users in Jenkins:

Navigate to "Manage Jenkins" and in the "security" topic choose "users" and create users.

-----------------------------------------------------------------------------------------------------------------------------------------------

-> Jenkins Agents:

* In the Jenkins console, navigate to "manage Jenkins" , in that there is a "system configuration" choose "Nodes", we can see the nodes.

* we gonna need another instance , don't need Jenkins in that machine, but we need some dependencies of Jenkins like "java17" in the "slave" machine.

* just make that "slave" machine "passwordless" from the "Jenkins" machine.

* In the "slave" machine, create a directory named "jenkins-jobs", inside that folder it is empty now.

* Navigate to the "Nodes" page in the "Jenkins page" and create a "New node" by clicking "New Node". It will open a pop-up and ask for details.

* Fill the details like "Node name", choose "permanent agent" and click "create".

* Then give the remote directory as "/home/ubuntu/jenkins-jobs" from the slave machine, give labels as "slave-1" , choose Launch method as "Launch agents via SSH" and give the "public ip" of the slave machine in the "host" field, then in the credentials , click "Add" , it will open a pop-up , in that pop-up
choose "username with password"  and click "Add" in the "Host key verification strategy" choose "Manually trusted key verification stategy" and click "save"

* The node named "syed_node" will be created.

* Inside that "syed_node" see for logs and see the output as "This is a Unix agent
Agent successfully connected and online"

* If we are not sure, our node is connected with our server, we can check this by , running "ls" command in the slave server's path (/home/worker1/jenkins-jobs), if it is connected it will have "remoting and remoting.jar" files , which means our node is connected.

 Let's run the "job-1" in "slave" machine:

* In the "job-1"'s shell add the command "docker images", before before building this command , make sure "docker" is installed in the "slave" machine, otherwise it will throw error.

* In the "job-1" navigate to "configure" and in "General" choose "Restrict where this project can run" and choose "slave-1" then click "apply" and "save".

* After this if we build the "job-1" it will successfully run in the "slave" and shows the docker images output.

* Also in the path "/home/worker1/jenkins-jobs" there will be folder called "workspace" will be created.

Now we have successfully worked on "Jenkins agents".

-----------------------------------------------------------------------------------------------------------------------------------------------

Jenkins to automatically pull code from a GitHub repository whenever changes are pushed:

GitHub en sontha key - "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" (Expiry in 7 days)

* Create a job named "GitHub-Demo-Job" and choose "Freestyle project" and click "ok"

* In that job's configuration, scroll to "source code management" , select "git" , in the repository URL have to give like 
  "https://github.com/syed90-boss/jenkins-git.git" , then in credentials click "Add" , choose "Jenkins" and select "username and password" and "Enter the
  GitHub username and PAT and click "Add" and choose that created one.

* In the Build triggers section, choose "GitHub hook trigger for GITScm polling" and in the shell give "git pull origin main
  echo "Code Pulled Successfully!" , after that click "save". Now manually click "Build now" and see the output.

* Now goto GitHub repo's settings , choose "webhooks" and click "Add webhook", then in the payload URL give the URL of ngrok which is
  "https://16dd-182-78-81-138.ngrok-free.app/<github-webhook>/" have to add "github-webhook" at the end of the URL, then in content type choose
  "application/json" , then choose "Enable SSL verification", then choose "just the push event" and click "Add webhook", so webhook will be created.
   
* so now if we change the codes in our GitHub repo, the "Github-Demo-Job" job in Jenkins will be triggered automatically and it will build that job.

  successfully completed this!!

-----------------------------------------------------------------------------------------------------------------------------------------------

ngrok installation:

document link - https://ngrok.com/downloads/linux

curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
>   | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
>   && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
>   | sudo tee /etc/apt/sources.list.d/ngrok.list \
>   && sudo apt update \
>   && sudo apt install ngrok

ngrok --version

ngrok config add-authtoken <token>   (get the token from the ngrok UI)

ngrok http 8080  (after running this command , it will open a cmd interface and will give the URL "https://16dd-182-78-81-138.ngrok-free.app"

-----------------------------------------------------------------------------------------------------------------------------------------------


















